package leetcode;

import java.util.*;

// https://leetcode.com/problems/number-of-islands/
public class CountIslands{

    // number of connected components
    public int numIslands(char[][] grid) {
        int count = 0;

        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[i].length; j++) {
                if (grid[i][j] == '1') {
                    count++;
                    bfs(i,j, grid);

                    // dfs(i,j, grid);
                }
            }
        }

        return count;
    }


    void bfs(int i, int j, char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;

        Queue<int[]> que = new LinkedList<>();
        que.offer(new int[]{i,j});

        int dirs[][] = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}};
        grid[i][j] = '0';

        while(!que.isEmpty()) {
            int []src = que.poll();

            for(int []dir : dirs) {
                int cell[] = new int[]{src[0] + dir[0], src[1] + dir[1]};
                if (isValidCell(cell, m , n) && grid[cell[0]][cell[1]] == '1') {
                    que.offer(cell);
                    grid[cell[0]][cell[1]] = '0';
                }
            }
        }
    }

    void dfs(int i, int j, char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;

        if (!isValidCell(new int[]{i,j}, m , n) || grid[i][j] == '0') {
            return;
        }

        int dirs[][] = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}};
        grid[i][j] = '0';

        for(int []dir : dirs) {
            int cell[] = new int[]{i + dir[0], j + dir[1]};
            dfs(cell[0], cell[1], grid);
        }
    }

    boolean isValidCell(int cell[], int row, int col) {
        if (cell[0] < 0 || cell[0] >= row || cell[1] < 0 || cell[1] >= col) {
            return false;
        }
        return true;
    }

    public static void main(String[] args) {
        //char [][]arr = {{'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},{'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},{'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},{'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},{'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},{'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}};
        char[][] arr = {{'1','1','1'}, {'0', '1', '0'}, {'1','1','1'}};

        System.out.print(new CountIslands().numIslands(arr));
    }
}